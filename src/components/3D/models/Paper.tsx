/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 paper.glb -t 
*/

import { useGLTF } from "@react-three/drei";
import { RigidBody, type RigidBodyProps } from "@react-three/rapier";
import { type GLTF } from "three-stdlib";

import { RIGID_BODY_PROPS } from "../../../consts/rigid-body-props.const";

import type * as THREE from "three";

type GLTFResult = GLTF & {
	nodes: {
		hand_5_: THREE.Mesh;
		Curve: THREE.Mesh;
		Curve002: THREE.Mesh;
		Curve003: THREE.Mesh;
		Curve004: THREE.Mesh;
	};
	materials: {
		["SVGMat.001"]: THREE.MeshStandardMaterial;
		["SVGMat.002"]: THREE.MeshStandardMaterial;
		["SVGMat.004"]: THREE.MeshStandardMaterial;
		["SVGMat.005"]: THREE.MeshStandardMaterial;
		["SVGMat.006"]: THREE.MeshStandardMaterial;
	};
};

interface PaperProps extends RigidBodyProps {
	groupProps?: JSX.IntrinsicElements["group"];
}

export function Paper({ groupProps, ...props }: PaperProps) {
	const { nodes, materials } = useGLTF("/models/paper.glb") as GLTFResult;

	return (
		<RigidBody {...RIGID_BODY_PROPS} {...props}>
			<group {...groupProps} dispose={null}>
				<mesh
					geometry={nodes.hand_5_.geometry}
					material={materials["SVGMat.001"]}
					rotation={[Math.PI / 2, 0, Math.PI]}
					scale={100}
				/>
				<mesh
					geometry={nodes.Curve.geometry}
					material={materials["SVGMat.002"]}
					rotation={[Math.PI / 2, 0, Math.PI]}
					scale={100}
				/>
				<mesh
					geometry={nodes.Curve002.geometry}
					material={materials["SVGMat.004"]}
					rotation={[Math.PI / 2, 0, Math.PI]}
					scale={100}
				/>
				<mesh
					geometry={nodes.Curve003.geometry}
					material={materials["SVGMat.005"]}
					rotation={[Math.PI / 2, 0, Math.PI]}
					scale={100}
				/>
				<mesh
					geometry={nodes.Curve004.geometry}
					material={materials["SVGMat.006"]}
					rotation={[Math.PI / 2, 0, Math.PI]}
					scale={100}
				/>
			</group>
		</RigidBody>
	);
}

useGLTF.preload("/models/paper.glb");
