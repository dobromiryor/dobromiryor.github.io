/* eslint-disable react/no-unknown-property */

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 text.glb -t 
*/

import { useGLTF } from "@react-three/drei";
import { RigidBody, type RapierRigidBody } from "@react-three/rapier";
import { useEffect, useRef, useState, type ReactNode } from "react";
import { Vector3, type Mesh, type MeshStandardMaterial } from "three";
import { type GLTF } from "three-stdlib";

import DARK from "../../../consts/3d-dark.const";
import LIGHT from "../../../consts/3d-light.const";
import { Theme } from "../../../enums/theme.enum";
import { useGravity } from "../../../hooks/useGravity";
import { useTheme } from "../../../hooks/useTheme";

type GLTFResult = GLTF & {
	nodes: {
		Curve009: Mesh;
		Curve009_1: Mesh;
		Curve009_2: Mesh;
		Curve009_3: Mesh;
		Curve009_4: Mesh;
		Curve009_5: Mesh;
		Curve009_6: Mesh;
		Curve009_7: Mesh;
		Curve009_8: Mesh;
		Curve009_9: Mesh;
		Text_part_000: Mesh;
		Text_part_001: Mesh;
		Text_part_002: Mesh;
		Text_part_003: Mesh;
		Text_part_004: Mesh;
		Text_part_006: Mesh;
		Text_part_007: Mesh;
		Text_part_008: Mesh;
		Text_part_009: Mesh;
		Text_part_010: Mesh;
		Text_part_011: Mesh;
		Text_part_013: Mesh;
		Text_part_014: Mesh;
		Text_part_015: Mesh;
		Text_part_017: Mesh;
		Text_part_018: Mesh;
		Text_part_019: Mesh;
		Text_part_020: Mesh;
		Text_part_021: Mesh;
		Text_part_022: Mesh;
		Text_part_023: Mesh;
		Text_part_024: Mesh;
		Text_part_026: Mesh;
		Text_part_027: Mesh;
		Text_part_028: Mesh;
		Text_part_029: Mesh;
		Text_part_030: Mesh;
		Text_part_031: Mesh;
		Text_part_032: Mesh;
		Text_part_033: Mesh;
	};
	materials: {
		["SVGMat.010"]: MeshStandardMaterial;
		["SVGMat.001"]: MeshStandardMaterial;
		["SVGMat.002"]: MeshStandardMaterial;
		["SVGMat.003"]: MeshStandardMaterial;
		["SVGMat.004"]: MeshStandardMaterial;
		["SVGMat.005"]: MeshStandardMaterial;
		["SVGMat.006"]: MeshStandardMaterial;
		["SVGMat.007"]: MeshStandardMaterial;
		["SVGMat.008"]: MeshStandardMaterial;
		["SVGMat.009"]: MeshStandardMaterial;
	};
};

interface WrapperProps {
	children: ReactNode;
}

const LetterWrapper = ({ children }: WrapperProps) => {
	const bodyRef = useRef<RapierRigidBody>(null);

	const [isRunning] = useGravity();

	useEffect(() => {
		if (isRunning) {
			bodyRef.current?.wakeUp();
		}
	}, [isRunning]);

	return (
		<RigidBody
			ref={bodyRef}
			angularDamping={0.1}
			colliders="cuboid"
			friction={0.5}
			gravityScale={isRunning ? 1 : 0}
			linearDamping={0.1}
			restitution={0.3}
		>
			{children}
		</RigidBody>
	);
};

const ROTATION_VELOCITY = -0.005;

enum Rotation {
	CLOCKWISE = ROTATION_VELOCITY,
	COUNTER_CLOCKWISE = -ROTATION_VELOCITY,
}

const HandWrapper = ({ children }: WrapperProps) => {
	const [rotation, setRotation] = useState<Rotation | null>(Rotation.CLOCKWISE);

	const handBodyRef = useRef<RapierRigidBody>(null);

	const [isRunning] = useGravity();

	useEffect(() => {
		if (isRunning) {
			handBodyRef.current?.wakeUp();
		}
	}, [isRunning]);

	useEffect(() => {
		if (!isRunning) {
			handBodyRef.current?.setEnabledRotations(false, false, true, true);
		}
	}, [isRunning]);

	useEffect(() => {
		let intervalID: ReturnType<typeof setInterval> | undefined;

		const rotate = (nextRotation: Rotation) => {
			handBodyRef.current?.applyTorqueImpulse(
				new Vector3(0, 0, nextRotation),
				true
			);
			handBodyRef.current?.resetTorques(!rotation);

			setRotation(nextRotation);
		};

		const switchRotation = () => {
			switch (rotation) {
				case Rotation.CLOCKWISE:
					return rotate(Rotation.COUNTER_CLOCKWISE);
				case Rotation.COUNTER_CLOCKWISE:
					return rotate(Rotation.CLOCKWISE);
			}
		};

		const stop = () => {
			handBodyRef.current?.setAngularDamping(0.1);
			handBodyRef.current?.setEnabledRotations(true, true, true, true);
			handBodyRef.current?.resetTorques(true);
		};

		if (handBodyRef.current?.angvel().z === 0) {
			switchRotation();
		}

		if (!intervalID && !isRunning) {
			intervalID = setInterval(switchRotation, 2000);
		} else {
			stop();
			clearInterval(intervalID);
		}

		return () => clearInterval(intervalID);
	}, [isRunning, rotation]);

	return (
		<RigidBody
			ref={handBodyRef}
			angularDamping={1}
			colliders="hull"
			friction={0.5}
			gravityScale={isRunning ? 1 : 0}
			linearDamping={0.1}
			restitution={0.3}
		>
			{children}
		</RigidBody>
	);
};

export function Hero(props: JSX.IntrinsicElements["group"]) {
	const { nodes, materials } = useGLTF("/models/hero.glb") as GLTFResult;
	const theme = useTheme();

	return (
		<group {...props} dispose={null} scale={2.2}>
			<HandWrapper>
				<group
					position={[3.7, 0, 0]}
					rotation={[Math.PI / 2, 0, 0]}
					scale={[13.859, 10, 13.859]}
				>
					<mesh
						geometry={nodes.Curve009.geometry}
						material={materials["SVGMat.010"]}
					/>
					<mesh
						geometry={nodes.Curve009_1.geometry}
						material={materials["SVGMat.001"]}
					/>
					<mesh
						geometry={nodes.Curve009_2.geometry}
						material={materials["SVGMat.002"]}
					/>
					<mesh
						geometry={nodes.Curve009_3.geometry}
						material={materials["SVGMat.003"]}
					/>
					<mesh
						geometry={nodes.Curve009_4.geometry}
						material={materials["SVGMat.004"]}
					/>
					<mesh
						geometry={nodes.Curve009_5.geometry}
						material={materials["SVGMat.005"]}
					/>
					<mesh
						geometry={nodes.Curve009_6.geometry}
						material={materials["SVGMat.006"]}
					/>
					<mesh
						geometry={nodes.Curve009_7.geometry}
						material={materials["SVGMat.007"]}
					/>
					<mesh
						geometry={nodes.Curve009_8.geometry}
						material={materials["SVGMat.008"]}
					/>
					<mesh
						geometry={nodes.Curve009_9.geometry}
						material={materials["SVGMat.009"]}
					/>
				</group>
			</HandWrapper>
			<LetterWrapper>
				<mesh
					geometry={nodes.Text_part_000.geometry}
					position={[0.232, 0.218, 0]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<meshStandardMaterial color={theme === Theme.LIGHT ? LIGHT : DARK} />
				</mesh>
			</LetterWrapper>
			<LetterWrapper>
				<mesh
					geometry={nodes.Text_part_001.geometry}
					position={[0.647, 0.16, 0]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<meshStandardMaterial color={theme === Theme.LIGHT ? LIGHT : DARK} />
				</mesh>
			</LetterWrapper>
			<LetterWrapper>
				<mesh
					geometry={nodes.Text_part_002.geometry}
					position={[0.913, 0.221, 0]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<meshStandardMaterial color={theme === Theme.LIGHT ? LIGHT : DARK} />
				</mesh>
			</LetterWrapper>
			<LetterWrapper>
				<mesh
					geometry={nodes.Text_part_003.geometry}
					position={[1.086, 0.221, 0]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<meshStandardMaterial color={theme === Theme.LIGHT ? LIGHT : DARK} />
				</mesh>
			</LetterWrapper>
			<LetterWrapper>
				<mesh
					geometry={nodes.Text_part_004.geometry}
					position={[1.36, 0.162, 0]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<meshStandardMaterial color={theme === Theme.LIGHT ? LIGHT : DARK} />
				</mesh>
			</LetterWrapper>
			<LetterWrapper>
				<mesh
					geometry={nodes.Text_part_006.geometry}
					position={[1.791, 0.216, 0]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<meshStandardMaterial color={theme === Theme.LIGHT ? LIGHT : DARK} />
				</mesh>
			</LetterWrapper>
			<LetterWrapper>
				<mesh
					geometry={nodes.Text_part_007.geometry}
					position={[2.099, 0.199, 0]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<meshStandardMaterial color={theme === Theme.LIGHT ? LIGHT : DARK} />
				</mesh>
			</LetterWrapper>
			<LetterWrapper>
				<mesh
					geometry={nodes.Text_part_008.geometry}
					position={[2.501, 0.16, 0]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<meshStandardMaterial color={theme === Theme.LIGHT ? LIGHT : DARK} />
				</mesh>
			</LetterWrapper>
			<LetterWrapper>
				<mesh
					geometry={nodes.Text_part_009.geometry}
					position={[2.804, 0.19, 0]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<meshStandardMaterial color={theme === Theme.LIGHT ? LIGHT : DARK} />
				</mesh>
			</LetterWrapper>
			<LetterWrapper>
				<mesh
					geometry={nodes.Text_part_010.geometry}
					position={[3.144, 0.16, 0]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<meshStandardMaterial color={theme === Theme.LIGHT ? LIGHT : DARK} />
				</mesh>
			</LetterWrapper>
			<LetterWrapper>
				<mesh
					geometry={nodes.Text_part_011.geometry}
					position={[3.411, 0.214, 0]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<meshStandardMaterial color={theme === Theme.LIGHT ? LIGHT : DARK} />
				</mesh>
			</LetterWrapper>
			<LetterWrapper>
				<mesh
					geometry={nodes.Text_part_013.geometry}
					position={[0.101, -0.442, 0]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<meshStandardMaterial color={theme === Theme.LIGHT ? LIGHT : DARK} />
				</mesh>
			</LetterWrapper>
			<LetterWrapper>
				<mesh
					geometry={nodes.Text_part_014.geometry}
					position={[0.272, -0.295, 0]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<meshStandardMaterial color={theme === Theme.LIGHT ? LIGHT : DARK} />
				</mesh>
			</LetterWrapper>
			<LetterWrapper>
				<mesh
					geometry={nodes.Text_part_015.geometry}
					position={[0.625, -0.491, 0]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<meshStandardMaterial color={theme === Theme.LIGHT ? LIGHT : DARK} />
				</mesh>
			</LetterWrapper>
			<LetterWrapper>
				<mesh
					geometry={nodes.Text_part_017.geometry}
					position={[1.206, -0.442, 0]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<meshStandardMaterial color={theme === Theme.LIGHT ? LIGHT : DARK} />
				</mesh>
			</LetterWrapper>
			<LetterWrapper>
				<mesh
					geometry={nodes.Text_part_018.geometry}
					position={[1.622, -0.498, 0]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<meshStandardMaterial color={theme === Theme.LIGHT ? LIGHT : DARK} />
				</mesh>
			</LetterWrapper>
			<LetterWrapper>
				<mesh
					geometry={nodes.Text_part_019.geometry}
					position={[1.986, -0.468, 0]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<meshStandardMaterial color={theme === Theme.LIGHT ? LIGHT : DARK} />
				</mesh>
			</LetterWrapper>
			<LetterWrapper>
				<mesh
					geometry={nodes.Text_part_020.geometry}
					position={[2.321, -0.47, 0]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<meshStandardMaterial color={theme === Theme.LIGHT ? LIGHT : DARK} />
				</mesh>
			</LetterWrapper>
			<LetterWrapper>
				<mesh
					geometry={nodes.Text_part_021.geometry}
					position={[2.663, -0.498, 0]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<meshStandardMaterial color={theme === Theme.LIGHT ? LIGHT : DARK} />
				</mesh>
			</LetterWrapper>
			<LetterWrapper>
				<mesh
					geometry={nodes.Text_part_022.geometry}
					position={[3.13, -0.491, 0]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<meshStandardMaterial color={theme === Theme.LIGHT ? LIGHT : DARK} />
				</mesh>
			</LetterWrapper>
			<LetterWrapper>
				<mesh
					geometry={nodes.Text_part_023.geometry}
					position={[3.503, -0.431, 0]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<meshStandardMaterial color={theme === Theme.LIGHT ? LIGHT : DARK} />
				</mesh>
			</LetterWrapper>
			<LetterWrapper>
				<mesh
					geometry={nodes.Text_part_024.geometry}
					position={[3.712, -0.47, 0]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<meshStandardMaterial color={theme === Theme.LIGHT ? LIGHT : DARK} />
				</mesh>
			</LetterWrapper>
			<LetterWrapper>
				<mesh
					geometry={nodes.Text_part_026.geometry}
					position={[0.212, -1.06, 0]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<meshStandardMaterial color={theme === Theme.LIGHT ? LIGHT : DARK} />
				</mesh>
			</LetterWrapper>
			<LetterWrapper>
				<mesh
					geometry={nodes.Text_part_027.geometry}
					position={[0.609, -1.158, 0]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<meshStandardMaterial color={theme === Theme.LIGHT ? LIGHT : DARK} />
				</mesh>
			</LetterWrapper>
			<LetterWrapper>
				<mesh
					geometry={nodes.Text_part_028.geometry}
					position={[0.92, -1.13, 0]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<meshStandardMaterial color={theme === Theme.LIGHT ? LIGHT : DARK} />
				</mesh>
			</LetterWrapper>
			<LetterWrapper>
				<mesh
					geometry={nodes.Text_part_029.geometry}
					position={[1.287, -1.128, 0]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<meshStandardMaterial color={theme === Theme.LIGHT ? LIGHT : DARK} />
				</mesh>
			</LetterWrapper>
			<LetterWrapper>
				<mesh
					geometry={nodes.Text_part_030.geometry}
					position={[1.645, -1.166, 0]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<meshStandardMaterial color={theme === Theme.LIGHT ? LIGHT : DARK} />
				</mesh>
			</LetterWrapper>
			<LetterWrapper>
				<mesh
					geometry={nodes.Text_part_031.geometry}
					position={[2.019, -1.152, 0]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<meshStandardMaterial color={theme === Theme.LIGHT ? LIGHT : DARK} />
				</mesh>
			</LetterWrapper>
			<LetterWrapper>
				<mesh
					geometry={nodes.Text_part_032.geometry}
					position={[2.408, -1.158, 0]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<meshStandardMaterial color={theme === Theme.LIGHT ? LIGHT : DARK} />
				</mesh>
			</LetterWrapper>
			<LetterWrapper>
				<mesh
					geometry={nodes.Text_part_033.geometry}
					position={[2.778, -1.136, 0]}
					rotation={[Math.PI / 2, 0, 0]}
				>
					<meshStandardMaterial color={theme === Theme.LIGHT ? LIGHT : DARK} />
				</mesh>
			</LetterWrapper>
		</group>
	);
}

useGLTF.preload("/models/hero.glb");
