/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 rock.glb -t 
*/

import { useGLTF } from "@react-three/drei";
import { RigidBody, type RigidBodyProps } from "@react-three/rapier";
import * as THREE from "three";
import { type GLTF } from "three-stdlib";

import { RIGID_BODY_PROPS } from "../../../consts/rigid-body-props.const";

type GLTFResult = GLTF & {
	nodes: {
		Curve: THREE.Mesh;
		Curve001: THREE.Mesh;
		Curve002: THREE.Mesh;
		Curve003: THREE.Mesh;
		Curve004: THREE.Mesh;
		Curve005: THREE.Mesh;
		Curve006: THREE.Mesh;
		Curve007: THREE.Mesh;
		Curve008: THREE.Mesh;
	};
	materials: {
		["SVGMat.001"]: THREE.MeshStandardMaterial;
		["SVGMat.002"]: THREE.MeshStandardMaterial;
		["SVGMat.003"]: THREE.MeshStandardMaterial;
		["SVGMat.004"]: THREE.MeshStandardMaterial;
		["SVGMat.005"]: THREE.MeshStandardMaterial;
		["SVGMat.006"]: THREE.MeshStandardMaterial;
		["SVGMat.007"]: THREE.MeshStandardMaterial;
		["SVGMat.008"]: THREE.MeshStandardMaterial;
		["SVGMat.009"]: THREE.MeshStandardMaterial;
	};
};

interface RockProps extends RigidBodyProps {
	groupProps?: JSX.IntrinsicElements["group"];
}

export function Rock({ groupProps, ...props }: RockProps) {
	const { nodes, materials } = useGLTF("/models/rock.glb") as GLTFResult;

	return (
		<RigidBody
			{...RIGID_BODY_PROPS}
			scale={
				new THREE.Vector3(
					Number(RIGID_BODY_PROPS.scale) * (1 / 3) * 2,
					Number(RIGID_BODY_PROPS.scale) * (1 / 3) * 2,
					Number(RIGID_BODY_PROPS.scale)
				)
			}
			{...props}
		>
			<group {...groupProps} dispose={null}>
				<mesh
					geometry={nodes.Curve.geometry}
					material={materials["SVGMat.001"]}
					rotation={[Math.PI / 2, Math.PI / 2, 0]}
					scale={100}
				/>
				<mesh
					geometry={nodes.Curve001.geometry}
					material={materials["SVGMat.002"]}
					rotation={[Math.PI / 2, Math.PI / 2, 0]}
					scale={100}
				/>
				<mesh
					geometry={nodes.Curve002.geometry}
					material={materials["SVGMat.003"]}
					rotation={[Math.PI / 2, Math.PI / 2, 0]}
					scale={100}
				/>
				<mesh
					geometry={nodes.Curve003.geometry}
					material={materials["SVGMat.004"]}
					rotation={[Math.PI / 2, Math.PI / 2, 0]}
					scale={100}
				/>
				<mesh
					geometry={nodes.Curve004.geometry}
					material={materials["SVGMat.005"]}
					rotation={[Math.PI / 2, Math.PI / 2, 0]}
					scale={100}
				/>
				<mesh
					geometry={nodes.Curve005.geometry}
					material={materials["SVGMat.006"]}
					rotation={[Math.PI / 2, Math.PI / 2, 0]}
					scale={100}
				/>
				<mesh
					geometry={nodes.Curve006.geometry}
					material={materials["SVGMat.007"]}
					rotation={[Math.PI / 2, Math.PI / 2, 0]}
					scale={100}
				/>
				<mesh
					geometry={nodes.Curve007.geometry}
					material={materials["SVGMat.008"]}
					rotation={[Math.PI / 2, Math.PI / 2, 0]}
					scale={100}
				/>
				<mesh
					geometry={nodes.Curve008.geometry}
					material={materials["SVGMat.009"]}
					rotation={[Math.PI / 2, Math.PI / 2, 0]}
					scale={100}
				/>
			</group>
		</RigidBody>
	);
}

useGLTF.preload("/models/rock.glb");
